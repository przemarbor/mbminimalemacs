;;; easysession-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from easysession.el

(autoload 'easysession-rename "easysession" "\
Rename the current session to NEW-SESSION-NAME.

(fn &optional NEW-SESSION-NAME)" t)
(autoload 'easysession-delete "easysession" "\
Delete a session. Prompt for SESSION-NAME if not provided.

(fn &optional SESSION-NAME)" t)
(autoload 'easysession-load "easysession" "\
Load the current session. SESSION-NAME is the session name.

(fn &optional SESSION-NAME)" t)
(autoload 'easysession-load-including-geometry "easysession" "\
Load the session and restore the position and size of the Emacs frames.
SESSION-NAME is the session name.

This function is typically used when Emacs is initially loaded. It ensures that
session settings, including the positions and sizes (geometry) of all frames,
are restored.

For subsequent session switching, consider using `easysession-load' or
`easysession-switch-to', which load the session without resizing or moving the
Emacs frames.

(fn &optional SESSION-NAME)")
(autoload 'easysession-save "easysession" "\
Save the current session.
SESSION-NAME is the name of the session.

(fn &optional SESSION-NAME)" t)
(autoload 'easysession-save-as "easysession" "\
Save the state of all frames into a session with the given name.
If SESSION-NAME is provided, use it; otherwise, use current session.
If the function is called interactively, ask the user.

(fn &optional SESSION-NAME)" t)
(autoload 'easysession-switch-to "easysession" "\
Save the current session and load a new one.

This function handles saving the current session and loading a new session
specified by SESSION-NAME. If SESSION-NAME is not provided, it will prompt the
user for a session name if called interactively. If the session already exists,
it will be loaded; otherwise, a new session will be created.

SESSION-NAME is the name of the session to switch to. If nil, the function
prompts the user for a session name if called interactively.

Behavior:
- If the current session is loaded and not being reloaded, the current session
is saved.
- Loads the specified session.
- Sets the specified session as the current session.
- If the session does not exist, it is saved and an empty session is
initialized.

(fn &optional SESSION-NAME)" t)
(defvar easysession-save-mode nil "\
Non-nil if Easysession-Save mode is enabled.
See the `easysession-save-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `easysession-save-mode'.")
(custom-autoload 'easysession-save-mode "easysession" nil)
(autoload 'easysession-save-mode "easysession" "\
Toggle `easysession-save-mode'.

This is a global minor mode.  If called interactively, toggle the
`Easysession-Save mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='easysession-save-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "easysession" '("easysession-"))

;;; End of scraped data

(provide 'easysession-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; easysession-autoloads.el ends here
